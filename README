NOTE: This is not intended to be a full user manual, just a quick introduction.

This folder contains Matlab files containing classes for simplicial complexes,
graphs, and collections of subsets of {1, ..., n}; the corresponding class names
are `SimplicialComplex`, `Graph`, and `Collection`.  Matlab interface and
wrapper functions for the C program Cliquer are also included in the package
`Cliquer`; though this package can be accessed directly, much of its desired
functionality can be access with methods of the graph class.

Objects of the above types can be constructed by calling the corresponding
constructor with an appropriately constructed matrix.  For the
`SimplicialComplex` and `Collection` constructors, the matrix should have rows
that are indicator vectors for subsets; for example, the matrix `A = [1 0 1 1 0;
0 1 1 0 0]` represents the subsets {1, 3, 4} and {2, 3} of the set {1, ..., 5}.
For the `Graph` object, the matrix passed to the constructor should be an
adjacency matrix; if the provided matrix is not symmetric, a warning is issued
and the upper triangular portion of the matrix is used.  (Note: If the matrix
passed into any of these constructors is not binary/boolean, the supports of the
rows are used in the constructions.)

NOTE: A `SimplicialComplex` can also be constructed by passing in a `Collection`
object.  Hence, for matrix A, `SimplicialComplex(A)` is equivalent to
`SimplicialComplex(Collection(A))`.

NOTE: It may seem unclear why `Collection` objects are used to store faces of a
complex instead of just storing those faces in a matrix as is used to construct
the complex.  The reason for this is that, at the time of writing the code, it
was unclear what storage format would allow for the most time- and
space-efficient algorithms.  By abstracting the storage format to this level, a
reimplementation of the storage format should be "easy" in that only the code
inside of the file Collection.m will require modification, which seems much more
desirable than tracing through all of the written code to find where the
specifics of the storage format were used.

SOME IMPORTANT CLASS METHODS For an instance `A` of a class, the object method
`Foo` can be accessed with the notation `A.Foo()`.  Additional documentation is
available by getting help on the fully qualified method name, e.g., `help
SimplicialComplex.GetFaces`.

    SimplicialComplex
	GetFaces()
	GetFacets()
        GetGenerators()
	Graph()
	Skeleton(iDimension)
	HellyCompletion(iDimension, iMaxFaceDim)

    Collection
        NOTE: Element `i` of collection `A` can be accessed with `A(i)`.
	
	Append(objCollection)
	Copy()
	MaximalElements()
	ToMatrix()

    Graph
	CliqueComplex(iMaxCliqueSize)
	CountCliques(iMin, iMax, bMaximal)
	GetCliques(iMin, iMax, bMaximal)
        ToMatrix()

	STATIC METHODS: Static method `Foo()` is accessible via `Graph.Foo()`.
	Random(iSize, iSparsity)

EXAMPLE: Compute the Helly 2-completion of a simplicial complex.

    Represent the generators of the complex as the rows of a matrix `A`.  From
    this, we construct the corresponding simplicial complex object by calling `B
    = SimplicialComplex(A)`.  The Helly 2-completion can now be obtained by
    calling `C = B.HellyCompletion(2)`.  Since the Helly completion of a
    simplicial complex is a simplicial complex, the variable `C` is a
    `SimplicialComplex` object; as such, its desired properties can be accessed
    through methods of `SimplicialComplex`.
