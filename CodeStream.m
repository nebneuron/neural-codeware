classdef CodeStream < handle
    properties
        % A cell array of the codes.
        Codes;
        
        % The simplicial complex generated by the supports of the
        % codewords in the final code in this stream.
        Complex;
    end
    
    methods (Access = public)
        function obj = CodeStream(cellCodes)
            assert(nargin < 2);
            
            obj.Codes = cell(0);
            
            if nargin == 1
                assert(isa(cellCodes, 'cell'));
                assert(~isempty(cellCodes));
                assert(isvector(cellCodes));
                
                for i = 1 : length(cellCodes)
                    obj.Append(cellCodes{i});
                end
            end
        end
        
        function [bIsValid, idx] = IsValidStream(this)
            % This object is only a code stream if if the support of each
            % codeword in code `i` is contained in the support of some
            % codeword in code `i + 1` for all valid `i`.
            
            % This initialization allows the update rule in the for-loop
            % below to work.
            bIsValid = true;
            
            for i = 2 : StreamLength(this)
                A = ToMatrix(this.Codes{i - 1});
                B = ToMatrix(this.Codes{i});
                
                bIsValid = (bIsValid && ...
                            all(max(A * B', [], 2) ...
                                == sum(A, 2)));
            end
        end
        
        function FindWeights(this)
            this.Complex = ...
                CodeComplex(this.Codes{StreamLength(this)});
            
            mtxFaces = ToMatrix(GetFaces(this.Complex));
            cvNumVerts = sum(mtxFaces, 2);
            cvWeights = StreamLength(this) * ones(size(mtxFaces, 1), 1);
            
            % A lot of extra computation is done here.  Can we remove the
            % extra computation at low expense (in a natural matlab-ish
            % way)?  How much time is this extra computation costing us?
            for i = (StreamLength(this) - 1 : -1 : 1)
                mtxWords = ToMatrix(this.Codes{i}.Words);
                cvWeights(max(mtxFaces * mtxWords', [], 2) == cvNumVerts) ...
                    = i;
            end
            
            SetWeights(this.Complex, cvWeights);
        end
        
        function Append(this, codeNew)
            assert(isa(codeNew, 'Code'), ...
                   ['Attempted to add a non-`Code` object to a' ...
                    ' `Codestream`.']);
            assert(( Length(codeNew) == CodeLength(this) ...
                     || StreamLength(this) == 0), ...
                   'Codes in a stream must have the same length.');
            
            this.Codes{StreamLength(this) + 1} = codeNew;
        end
        
        function i = CodeLength(this)
            if length(this.Codes) > 0
                i = Length(this.Codes{1});
            else
                i = 0;
            end
        end
        
        function i = StreamLength(this)
            i = length(this.Codes);
        end
    end
end